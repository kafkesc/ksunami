name: GitHub Release

env:
  ARTEFACTS_DIR: "_artefacts"

permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
    tags: [ "v[0-9]+.[0-9]+.[0-9]+*" ]
  workflow_dispatch:

jobs:
  release:
    name: GH Release

    # Workflow strategy supports multiple targets on multiple runners
    strategy:
      fail-fast: false
      matrix:
        job:
          # Linux
          - { target: aarch64-unknown-linux-gnu   , runner: ubuntu-20.04, cross: true,  can_fail: false }
          - { target: i686-unknown-linux-gnu      , runner: ubuntu-20.04, cross: true,  can_fail: false }
          - { target: x86_64-unknown-linux-gnu    , runner: ubuntu-20.04, cross: true,  can_fail: false }
#          - { target: arm-unknown-linux-gnueabihf , runner: ubuntu-20.04, cross: true,  can_fail: false }
#          - { target: arm-unknown-linux-musleabihf, runner: ubuntu-20.04, cross: true,  can_fail: false }
#          - { target: i686-unknown-linux-musl     , runner: ubuntu-20.04, cross: true,  can_fail: false }
#          - { target: x86_64-unknown-linux-musl   , runner: ubuntu-20.04, cross: true,  can_fail: false }
          # macOS
          - { target: x86_64-apple-darwin         , runner: macos-10.15,  cross: false, can_fail: false }
          # Windows
#          # TODO https://github.com/kafkesc/ksunami/issues/39
#          - { target: i686-pc-windows-msvc        , runner: windows-2019, cross: false, can_fail: true, arch: i686   }
#          - { target: x86_64-pc-windows-gnu       , runner: windows-2019, cross: false, can_fail: true, arch: x86_64 }
#          - { target: x86_64-pc-windows-msvc      , runner: windows-2019, cross: false, can_fail: true, arch: x86_64 }

    runs-on: ${{ matrix.job.runner }}
    continue-on-error: ${{ matrix.job.can_fail }}

    steps:
      - name: Check-out
        uses: actions/checkout@v3

      - name: Dependencies
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            arm-unknown-linux-*) sudo apt-get -y install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y install gcc-aarch64-linux-gnu g++-arm-linux-gnueabihf ;;
          esac

      - name: Create info to env
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> $GITHUB_ENV
          echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

#      # TODO https://github.com/kafkesc/ksunami/issues/39
#      - name: Deps (Windows)
#        if: ${{ startsWith(matrix.job.runner, 'windows') }}
#        run: >-
#          choco install visualstudio2019enterprise --package-parameters "
#            --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64
#            --add Microsoft.VisualStudio.Component.Windows10SDK
#            --add Microsoft.VisualStudio.Component.Windows10SDK.19041
#            --add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core
#            --add Microsoft.VisualStudio.Component.VC.CMake.Project
#            --add Microsoft.VisualStudio.Component.VC.CoreBuildTools
#            --add Microsoft.VisualStudio.Component.VC.ATLMFC
#            --add Microsoft.VisualStudio.Component.Roslyn.Compiler"
#          ; choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

#      # TODO https://github.com/kafkesc/ksunami/issues/39
#      - name: Envs - MSVC (Windows)
#        if: ${{ startsWith(matrix.job.runner, 'windows') }}
#        uses: ilammy/msvc-dev-cmd@v1
#        with:
#          arch: ${{ matrix.job.arch }}
#          vsversion: 2019

#      # TODO https://github.com/kafkesc/ksunami/issues/39
#      - name: Envs - WindowsSdkVerBinPath (Windows)
#        if: ${{ startsWith(matrix.job.runner, 'windows') }}
#        uses: myci-actions/export-env-var-powershell@1
#        with:
#          name: PATH
#          value: $env:PATH;$env:WindowsSdkVerBinPath\x86;$env:WindowsSdkVerBinPath\x64

      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          profile: minimal
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.cross }}
          command: build
          args: --locked --release --target=${{ matrix.job.target }}

      - name: Strip
        id: strip
        shell: bash
        run: |
          # Figure out if the binary has a suffix (Windows!)
          EXE_suffix=""
          case ${{ matrix.job.target }} in
            *-pc-windows-*) EXE_suffix=".exe" ;;
          esac;
          
          # Setup paths
          BIN_DIR="${{ env.ARTEFACTS_DIR }}/release-bin/"
          mkdir -p "${BIN_DIR}"
          BIN_NAME="${{ env.PROJECT_NAME }}${EXE_suffix}"
          BIN_PATH="${BIN_DIR}/${BIN_NAME}"
          
          # Copy the release build binary to the result location
          cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "${BIN_DIR}"
          
          # Let subsequent steps know where to find the (stripped) bin
          echo "BIN_PATH=${BIN_PATH}" >> $GITHUB_OUTPUT
          echo "BIN_NAME=${BIN_NAME}" >> $GITHUB_OUTPUT
